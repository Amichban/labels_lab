name: Claude Code GitHub Actions

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  claude-assist:
    # Only run if comment mentions @claude
    if: contains(github.event.comment.body || github.event.issue.body, '@claude')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Claude Code SDK
        run: |
          pip install anthropic-claude-code
          npm install -g @anthropic/claude-code-sdk
          
      - name: Process request with Claude
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Extract the request
          if [ "${{ github.event_name }}" = "issues" ]; then
            REQUEST="${{ github.event.issue.body }}"
            ISSUE_NUMBER="${{ github.event.issue.number }}"
          else
            REQUEST="${{ github.event.comment.body }}"
            ISSUE_NUMBER="${{ github.event.issue.number }}"
          fi
          
          # Remove @claude mention
          REQUEST=${REQUEST//@claude/}
          
          # Create a temporary script to handle the request
          cat > process_request.py << 'EOF'
          import os
          import sys
          from anthropic_claude_code import ClaudeCode
          
          request = sys.argv[1]
          issue_number = sys.argv[2]
          
          # Initialize Claude Code
          client = ClaudeCode(api_key=os.environ['ANTHROPIC_API_KEY'])
          
          # Process based on request type
          if "implement" in request.lower():
              # Implementation request
              response = client.implement_feature(request)
              branch_name = f"claude/issue-{issue_number}"
              
          elif "review" in request.lower():
              # Code review request
              response = client.review_code(request)
              
          elif "fix" in request.lower():
              # Bug fix request
              response = client.fix_issue(request)
              branch_name = f"claude/fix-{issue_number}"
              
          else:
              # General assistance
              response = client.assist(request)
          
          print(response)
          EOF
          
          # Run the processor
          python process_request.py "$REQUEST" "$ISSUE_NUMBER" > response.txt
          
      - name: Create branch and commit changes
        if: success() && (contains(github.event.comment.body || github.event.issue.body, 'implement') || contains(github.event.comment.body || github.event.issue.body, 'fix'))
        run: |
          BRANCH_NAME="claude/issue-${{ github.event.issue.number }}"
          
          # Configure git
          git config --global user.name "Claude Code Bot"
          git config --global user.email "claude@anthropic.com"
          
          # Create and switch to new branch
          git checkout -b "$BRANCH_NAME"
          
          # Add all changes
          git add -A
          
          # Commit if there are changes
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "feat: Implement request from issue #${{ github.event.issue.number }}
            
            Co-authored-by: ${{ github.event.issue.user.login }} <${{ github.event.issue.user.id }}+${{ github.event.issue.user.login }}@users.noreply.github.com>"
            
            # Push to origin
            git push origin "$BRANCH_NAME"
          fi
          
      - name: Create Pull Request
        if: success() && (contains(github.event.comment.body || github.event.issue.body, 'implement') || contains(github.event.comment.body || github.event.issue.body, 'fix'))
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: claude/issue-${{ github.event.issue.number }}
          title: "ðŸ¤– Claude: ${{ github.event.issue.title }}"
          body: |
            ## AI Implementation
            
            This PR was automatically generated by Claude Code based on issue #${{ github.event.issue.number }}.
            
            ### Changes Made
            - Implemented requested functionality
            - Added tests where applicable
            - Followed project conventions in CLAUDE.md
            
            ### Testing
            - [ ] Unit tests pass
            - [ ] Integration tests pass
            - [ ] Manual testing completed
            
            ### Review Checklist
            - [ ] Code follows project style
            - [ ] Documentation updated
            - [ ] No security vulnerabilities
            - [ ] Performance considered
            
            Closes #${{ github.event.issue.number }}
            
            ---
            *Generated by Claude Code - Please review carefully before merging*
            
      - name: Post review comment
        if: success() && contains(github.event.comment.body || github.event.issue.body, 'review')
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const response = fs.readFileSync('response.txt', 'utf8');
            
            if (context.eventName === 'pull_request_review_comment') {
              await github.rest.pulls.createReviewComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                body: response,
                commit_id: context.payload.comment.commit_id,
                path: context.payload.comment.path,
                line: context.payload.comment.line
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: response
              });
            }

# Simplified setup workflow
  setup:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Setup instructions
        run: |
          echo "To set up Claude Code GitHub Actions:"
          echo "1. Install the Claude GitHub App: https://github.com/apps/claude-code"
          echo "2. Add ANTHROPIC_API_KEY to your repository secrets"
          echo "3. Ensure CLAUDE.md exists in your repository root"
          echo "4. Mention @claude in issues or PRs to activate"